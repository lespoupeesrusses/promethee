<%
master_data ||= nil
promethee_data = Promethee::Data.new master_data
%>

<script>

  var promethee = angular
    .module('Promethee', ['summernote', 'ngAnimate'])
    .value('data', <%= promethee_data.to_json.html_safe %>)
    .value('definitions', [])
    .value('inspected', { component: null })
    .value('mode', 'write')
    .value('preview', 'desktop')
    .value('fullscreen', false)
    .config(function($rootScopeProvider) {
      $rootScopeProvider.digestTtl(20);
    })
    .filter('htmlSafe', ['$sce', function($sce) {
      return function(val) {
        return $sce.trustAsHtml(val);
      };
    }])
    .filter('urlSafe', ['$sce', function($sce) {
      return function(val) {
        return $sce.trustAsResourceUrl(val);
      };
    }])
    .filter('humanize', function() {
      return function(val) {
        val = (val + '').replace(/_/g, ' ').replace(/([A-Z])/g, ' $1').replace(/\s\s+/, ' ').trim();
        return val[0].toUpperCase() + val.substring(1).toLowerCase();
      };
    })
    .filter('textContentFromHTML', function() {
      return function(val, distinctParagraphs) {
        var element = document.createElement('div');
        element.innerHTML = val;

        if(distinctParagraphs === 'distinctParagraphs') {
          var paragraphs = element.querySelectorAll('p');
          for(var i = 0; i < paragraphs.length; i++) paragraphs[i].textContent += ' ';
        }

        return element.textContent;
      }
    })
    .filter('numberOfCharacters', function() {
      return function(val) {
        return val.length;
      };
    })
    .filter('numberOfWords', function() {
      return function(val) {
        var words = val
          .replace(/\bhttps?:\/\/[a-z0-9\-\._]+(?:\/[^\s\n\r]+)?/gi, 'a') // A URL is one word
          .replace(/\b[a-z0-9\-\._]+@[a-z0-9\-\._]+\.[a-z0-9\-\._]+\b/gi, 'a') // An email is one word
          .replace(/[^a-z0-9\s\n\r]/gi, ' ')
          .replace(/[\s\n\r]+/g, ' ')
          .trim()
          .split(' ');

        return words[0] === '' ? 0 : words.length;
      };
    });

  promethee.controller('PrometheeController', ['data', '$scope', 'definitions', '$http', 'mode', 'preview', 'fullscreen', 'inspected', 
                                        function(data, $scope, definitions, $http, mode, preview, fullscreen, inspected) {

    // Data (TODO use Adder and probably page definition to init)
    if(data === null || data === '') {
      data = {
        id: '',
        type: 'page',
        version: 1,
        children: []
      };
    }

    $scope.data = $scope.component = data;
    $scope.inspected = inspected;
    $scope.mode = mode;
    $scope.preview = preview;
    $scope.fullscreen = fullscreen;

    $scope.enablePreview = function() {
      if (this.mode === 'preview') return;
      this.mode = 'preview';

      var form = document.createElement('form');
      document.body.appendChild(form);
      form.method = 'POST';
      form.action = <%= promethee_preview_path.to_json.html_safe %>;
      form.target = 'preview';
      
      var input = document.createElement('input');
      input.type = 'text';
      input.value = JSON.stringify(data);
      input.name = 'data';
      form.appendChild(input);
      form.submit();
      document.body.removeChild(form);
    }

    $scope.remove = function(component, components) {
      var index = components.indexOf(component);
      components.splice(index, 1);
    }

  }]);

</script>

<div
  id="promethee"
  class="promethee-editor"
  ng-class="{ 'promethee-editor--fullscreen': fullscreen }"
  ng-app="Promethee"
  ng-controller="PrometheeController as prometheeController"
  >
  <%= render 'promethee/edit/shared/data' %>
  <%= render 'promethee/edit/shared/navbar' %>
  <%= render 'promethee/edit/write' %>
  <%= render 'promethee/edit/move' %>
  <%= render 'promethee/edit/preview' %>
</div>

