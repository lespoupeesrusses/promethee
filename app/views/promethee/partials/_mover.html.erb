<script type="text/ng-template" id="promethee/partials/mover">
  <div  ng-init="components = component.children; type = component.type" 
        class="promethee-editor__mover--list">
    <div  class="promethee-editor__mover--droppable promethee-editor__mover--droppable--{{type}} promethee-editor__mover--droppable--{{type}}--first" 
          droppable 
          data-index="0"
          >
    </div>
    <div  ng-repeat="component in components" 
          class="promethee-editor__mover--draggable promethee-editor__mover--draggable--{{type}}" 
          draggable 
          data-index="{{$index}}" 
          data-type="{{component.type}}"
          >
        <ng-include src="'promethee/components/' + component.type + '/move'"></ng-include>
        <div  class="promethee-editor__mover--droppable promethee-editor__mover--droppable--{{type}}" 
              droppable 
              data-index="{{$index+1}}"
              data-type="{{type}}"
              >
        </div>
    </div>
  </div>
</script>

<div class="promethee-editor__mover" ng-show="move" ng-init="component = data">
  <div class="container">
    <ng-include src="'promethee/partials/mover'"></ng-include>
  </div>
</div>

<script type="text/javascript">
  promethee
    .directive('draggable', function() {
      return {
        restrict:'A',
        link: function(scope, element, attrs) {
          element.draggable({
            scroll: true,
            cursor: "pointer",
            cursorAt: { top: 0, left: 0 },
            refreshPositions: true,
            start: function() {
              var $elementDragged = $(element[0]);
              $elementDragged.addClass('promethee-editor__mover--dragged');
              var type = $elementDragged.data('type');
              $('.promethee-editor__mover').addClass('promethee-editor__mover--dragging promethee-editor__mover--dragging--' + type);

              // The droppable zone immediately before has no use, it would put the object at the same position
              var $droppableBefore = $elementDragged.prev('.promethee-editor__mover--draggable').find('.promethee-editor__mover--droppable').last();
              if ($droppableBefore.length === 0) {
                // For the first child, we look for the previous droppable zone
                $droppableBefore = $elementDragged.prev('.promethee-editor__mover--droppable');
              }
              $droppableBefore.addClass('promethee-editor__mover--droppable--hidden');
            },
            stop: function() {
              var $elementDragged = $(element[0]);
              $elementDragged.removeClass('promethee-editor__mover--dragged');
              var type = $elementDragged.data('type');
              $('.promethee-editor__mover').removeClass('promethee-editor__mover--dragging promethee-editor__mover--dragging--' + type);

              $('.promethee-editor__mover--droppable').removeClass('promethee-editor__mover--droppable--hidden');
            },
            helper: function( event ) {
              return $( '<div></div>' );
            }
          });
        }
      }
    })
    .directive('droppable', function($compile) {
      return {
        restrict: 'A',
        link: function(scope, element, attrs) {
          element.droppable({
            drop: function(event, ui) {
              var draggedFromList = angular.element(ui.draggable).parent().scope().components;
              var draggedFromIndex = parseInt(ui.draggable[0].getAttribute('data-index'));
              draggedFromList.splice(draggedFromIndex, 1);

              var component = angular.element(ui.draggable).scope().component;
              var droppedToList = angular.element(this).scope().components;
              var droppedToIndex = parseInt(this.getAttribute('data-index'));
              if (draggedFromList == droppedToList) {
                // The object we dragged was removed from the list
                if (draggedFromIndex < droppedToIndex) {
                  // It was before the dropped index, so removing it changed the index
                  droppedToIndex -= 1;
                }
              }
              droppedToList.splice(droppedToIndex, 0, component);

              scope.$apply();
            }
          });
        }
      }
    });
</script>